// VER_JAVA - sets sourceCompatibility and targetCompatibility
// project.version
// project.org
// project.name
// project.description
// env variables: gh_token, nexus_user, nexus_pass, bintray_user, bintray_pass

// creates eclipse projects with source and javadoc
// sets up a default spotless config
// sets up standard publishing
//     snapshots to https://oss.sonatype.org/content/repositories/snapshots
//     releases to jcenter() and mavenCentral()

buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		jcenter()
	}
	dependencies {
		// https://github.com/diffplug/spotless/blob/master/plugin-gradle/README.md
		classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.13.0'

		// https://github.com/ajoberstar/gradle-git/wiki/Github%20Pages%20Plugin
		classpath 'org.ajoberstar:gradle-git:1.7.2'

		// https://github.com/bintray/gradle-bintray-plugin
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.1'

		// https://github.com/mnlipp/jdrupes-mdoclet
		classpath 'gradle.plugin.org.jdrupes.mdoclet:gradle-plugin:1.0.3'
	}
}
repositories {
	mavenCentral()
	// SNAPSHOT versions are free to rely on other SNAPSHOT libraries
	if (project.version.endsWith('-SNAPSHOT')) {
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
}

apply plugin: 'java'
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

// https://github.com/Johni0702/gradle-reproducible-builds-plugin/blob/a524ada411315aa9b2a58eedcaaa834015e56721/src/main/groovy/de/johni0702/gradle/ReproducibleBuildsPlugin.groovy#L24-L29
tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	dirMode = 0775
	fileMode = 0664
}

/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
	jdt {
		sourceCompatibility VER_JAVA
		targetCompatibility VER_JAVA
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

////////////
// FORMAT //
////////////
/*
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
	java {
		licenseHeaderFile(rootProject.file('gradle/spotless/spotless.license.java'))                // License header file
		importOrder()
		eclipse('4.7.2').configFile(rootProject.file('gradle/spotless/spotless.eclipseformat.xml'))	// XML file dumped out by the Eclipse formatter
	}
	format 'misc', {
		target '.gitignore', '*.gradle', '*.md', '.ci/*.sh'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	freshmark {
		target '*.md'
		propertiesFile('gradle.properties')
	}
}
*/

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jdrupes.mdoclet'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
String version_str = project.version.endsWith('-SNAPSHOT') ? 'snapshot' : project.version
def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
def javadocInfo = '<h2>' + makeLink("https://github.com/${org}/${name}", "${group}:${name}:${version}") +
' by ' + makeLink('http://www.diffplug.com', 'DiffPlug') + '</h2>'
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.header javadocInfo
	options.footer javadocInfo
	options.links('https://docs.oracle.com/javase/8/docs/api/')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
def isSnapshot = project.version.endsWith('-SNAPSHOT')
// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml {
				// findbugs annotations should have scope "provided"
				asNode().dependencies.'*'.findAll() { it.groupId.text() == 'com.google.code.findbugs' }.each() { it.scope*.value = 'provided' }
				// add MavenCentral requirements to the POM
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description project.description
					url "https://github.com/${project.org}/${project.name}"
					scm {
						url "https://github.com/${project.org}/${project.name}"
						connection "scm:git:git://github.com/${project.org}/${project.name}"
						developerConnection "scm:git:ssh:git@github.com/${project.org}/${project.name}"
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'nedtwigg'
							name 'Ned Twigg'
							email 'ned.twigg@diffplug.com'
						}
					}
				}
			}
		}
	}
	if (isSnapshot) {
		// upload snapshots to oss.sonatype.org
		repositories { maven {
			url = 'https://oss.sonatype.org/content/repositories/snapshots'
			credentials {
				username = cred('nexus_user')
				password = cred('nexus_pass')
			}
		} }
	}
}

if (!isSnapshot) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = cred('bintray_user')
		key = cred('bintray_pass')
		publications = ['mavenJava']
		publish = true
		pkg {
			repo = 'opensource'
			name = project.name
			userOrg = project.org
			version {
				name = project.version
				mavenCentralSync {
					user = cred('nexus_user')
					password = cred('nexus_pass')
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn(['generatePomFileForMavenJavaPublication', jar, sourcesJar, javadocJar])
}

//////////////////
// GITHUB PAGES //
//////////////////
apply plugin: 'org.ajoberstar.github-pages'
githubPages {
	repoUri = "https://github.com/${project.org}/${project.name}"
	deleteExistingFiles = false
	pages {
		from javadoc.destinationDir
		into "javadoc/${version_str}"
	}
	credentials {
		username = cred('gh_token')
		password = ''
	}
}
tasks.prepareGhPages.dependsOn(":javadoc")
